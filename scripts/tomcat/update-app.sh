#!/usr/bin/env bash
#
# ARG_OPTIONAL_BOOLEAN([ui],[],[Update UI env])
# ARG_OPTIONAL_BOOLEAN([designer],[],[Update Designer env])
# ARG_OPTIONAL_SINGLE([ops],[],[Update ops env])
# ARG_POSITIONAL_SINGLE([buildfile],[Build file])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info
# Generated online by https://argbash.dev/generate

set -o errexit    # Used to exit upon error, avoiding cascading errors
set -o pipefail   # Unveils hidden failures

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_ui="off"
_arg_designer="off"
_arg_ops=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [--(no-)ui] [--(no-)designer] [--ops <arg>] [-h|--help] <buildfile>\n' "$0"
	printf '\t%s\n' "<buildfile>: Build file"
	printf '\t%s\n' "--ui, --no-ui: Update UI env (off by default)"
	printf '\t%s\n' "--designer, --no-designer: Update Designer env (off by default)"
	printf '\t%s\n' "--ops: Update ops env (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-ui|--ui)
				_arg_ui="on"
				test "${1:0:5}" = "--no-" && _arg_ui="off"
				;;
			--no-designer|--designer)
				_arg_designer="on"
				test "${1:0:5}" = "--no-" && _arg_designer="off"
				;;
			--ops)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ops="$2"
				shift
				;;
			--ops=*)
				_arg_ops="${_key##--ops=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'buildfile'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_buildfile "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#

cd /opt/biznuvo

tar xvf $_arg_buildfile

cd installation_archives

if [[ $_arg_designer == "on" ]]; then
	./upgrade-designer.sh --config=skip
	_arg_ui=off
fi

if [[ -n $_arg_ops ]]; then
	./upgrade-operations.sh $_arg_ops
	_arg_ui=on
fi

if [[ $_arg_ui == "on" ]]; then
        ./install-ui.sh
fi

# ] <-- needed because of Argbash
